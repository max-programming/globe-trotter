/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as protectedRouteRouteImport } from './routes/(protected)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as protectedIndexRouteImport } from './routes/(protected)/index'
import { Route as protectedProfileRouteImport } from './routes/(protected)/profile'
import { Route as authSignUpRouteImport } from './routes/(auth)/sign-up'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as protectedTripsNewRouteImport } from './routes/(protected)/trips/new'
import { Route as protectedTripsTripIdRouteImport } from './routes/(protected)/trips/$tripId'
import { Route as protectedSettingsProfileRouteImport } from './routes/(protected)/settings/profile'
import { ServerRoute as ApiPlacesAutocompleteServerRouteImport } from './routes/api/places/autocomplete'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const protectedRouteRoute = protectedRouteRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedIndexRoute = protectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => protectedRouteRoute,
} as any)
const protectedProfileRoute = protectedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => protectedRouteRoute,
} as any)
const authSignUpRoute = authSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => authRouteRoute,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => authRouteRoute,
} as any)
const protectedTripsNewRoute = protectedTripsNewRouteImport.update({
  id: '/trips/new',
  path: '/trips/new',
  getParentRoute: () => protectedRouteRoute,
} as any)
const protectedTripsTripIdRoute = protectedTripsTripIdRouteImport.update({
  id: '/trips/$tripId',
  path: '/trips/$tripId',
  getParentRoute: () => protectedRouteRoute,
} as any)
const protectedSettingsProfileRoute =
  protectedSettingsProfileRouteImport.update({
    id: '/settings/profile',
    path: '/settings/profile',
    getParentRoute: () => protectedRouteRoute,
  } as any)
const ApiPlacesAutocompleteServerRoute =
  ApiPlacesAutocompleteServerRouteImport.update({
    id: '/api/places/autocomplete',
    path: '/api/places/autocomplete',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof protectedIndexRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/profile': typeof protectedProfileRoute
  '/settings/profile': typeof protectedSettingsProfileRoute
  '/trips/$tripId': typeof protectedTripsTripIdRoute
  '/trips/new': typeof protectedTripsNewRoute
}
export interface FileRoutesByTo {
  '/': typeof protectedIndexRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/profile': typeof protectedProfileRoute
  '/settings/profile': typeof protectedSettingsProfileRoute
  '/trips/$tripId': typeof protectedTripsTripIdRoute
  '/trips/new': typeof protectedTripsNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(auth)': typeof authRouteRouteWithChildren
  '/(protected)': typeof protectedRouteRouteWithChildren
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/(protected)/profile': typeof protectedProfileRoute
  '/(protected)/': typeof protectedIndexRoute
  '/(protected)/settings/profile': typeof protectedSettingsProfileRoute
  '/(protected)/trips/$tripId': typeof protectedTripsTripIdRoute
  '/(protected)/trips/new': typeof protectedTripsNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/sign-in'
    | '/sign-up'
    | '/profile'
    | '/settings/profile'
    | '/trips/$tripId'
    | '/trips/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/sign-in'
    | '/sign-up'
    | '/profile'
    | '/settings/profile'
    | '/trips/$tripId'
    | '/trips/new'
  id:
    | '__root__'
    | '/(auth)'
    | '/(protected)'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/(protected)/profile'
    | '/(protected)/'
    | '/(protected)/settings/profile'
    | '/(protected)/trips/$tripId'
    | '/(protected)/trips/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  protectedRouteRoute: typeof protectedRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/places/autocomplete': typeof ApiPlacesAutocompleteServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/places/autocomplete': typeof ApiPlacesAutocompleteServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/places/autocomplete': typeof ApiPlacesAutocompleteServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/places/autocomplete'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/places/autocomplete'
  id: '__root__' | '/api/auth/$' | '/api/places/autocomplete'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiPlacesAutocompleteServerRoute: typeof ApiPlacesAutocompleteServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/': {
      id: '/(protected)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedIndexRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(protected)/profile': {
      id: '/(protected)/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof protectedProfileRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(protected)/trips/new': {
      id: '/(protected)/trips/new'
      path: '/trips/new'
      fullPath: '/trips/new'
      preLoaderRoute: typeof protectedTripsNewRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(protected)/trips/$tripId': {
      id: '/(protected)/trips/$tripId'
      path: '/trips/$tripId'
      fullPath: '/trips/$tripId'
      preLoaderRoute: typeof protectedTripsTripIdRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(protected)/settings/profile': {
      id: '/(protected)/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof protectedSettingsProfileRouteImport
      parentRoute: typeof protectedRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/places/autocomplete': {
      id: '/api/places/autocomplete'
      path: '/api/places/autocomplete'
      fullPath: '/api/places/autocomplete'
      preLoaderRoute: typeof ApiPlacesAutocompleteServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface authRouteRouteChildren {
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface protectedRouteRouteChildren {
  protectedProfileRoute: typeof protectedProfileRoute
  protectedIndexRoute: typeof protectedIndexRoute
  protectedSettingsProfileRoute: typeof protectedSettingsProfileRoute
  protectedTripsTripIdRoute: typeof protectedTripsTripIdRoute
  protectedTripsNewRoute: typeof protectedTripsNewRoute
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedProfileRoute: protectedProfileRoute,
  protectedIndexRoute: protectedIndexRoute,
  protectedSettingsProfileRoute: protectedSettingsProfileRoute,
  protectedTripsTripIdRoute: protectedTripsTripIdRoute,
  protectedTripsNewRoute: protectedTripsNewRoute,
}

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(
  protectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  protectedRouteRoute: protectedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiPlacesAutocompleteServerRoute: ApiPlacesAutocompleteServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
